    def bifpn(self, feat1, feat2, feat3):
        P5 = self.conv_for_feat3(feat3) # 20, 20, 1024 -> 20, 20, 512
        P5_upsample = self.upsample(P5)  # 20, 20, 512 -> 40, 40, 512
        P4 = torch.cat([P5_upsample, feat2], 1)  # 40, 40, 512 -> 40, 40, 1024
        P4 = self.conv3_for_upsample1(P4)  # csplayer # 40, 40, 1024 -> 40, 40, 512
        P4 = self.conv_for_feat2(P4) # 40, 40, 512 -> 40, 40, 256


        P4_upsample = self.upsample(P4)  # 40, 40, 256 -> 80, 80, 256
        P3 = torch.cat([P4_upsample, feat1], 1) # 80, 80, 256 cat 80, 80, 256 -> 80, 80, 512
        P3 = self.conv3_for_upsample2(P3)  # csplayer # 80, 80, 512 -> 80, 80, 256  输出1


        P3_downsample = self.down_sample1(P3)  # 80, 80, 256 -> 40, 40, 256
        # 三个特征concat
        P4 = torch.cat([P3_downsample,P4,feat2], 1)  # -> 40, 40, 512+512
        P4 = self.conv_new1(P4)                 # -> 40, 40, 512
        # P4 = torch.cat([P3_downsample, P4], 1)  # 40, 40, 256 cat 40, 40, 256 -> 40, 40, 512
        P4 = self.conv3_for_downsample1(P4)  # csplayer   # 40, 40, 512 -> 40, 40, 512  输出2


        P4_downsample = self.down_sample2(P4)   # 40, 40, 512 -> 20, 20, 512
        # 三个特征concat
        P5 = torch.cat([P4_downsample, P5, feat3], 1)  # -> 20, 20, 1024 + 1024
        P5 = self.conv_new2(P5)
        # P5 = torch.cat([P4_downsample, P5], 1)   # 20, 20, 512 cat 20, 20, 512 -> 20, 20, 1024
        P5 = self.conv3_for_downsample2(P5)  # csplayer  # 20, 20, 1024 -> 20, 20, 1024  输出3

        return P3, P4, P5

    def bifpn_2(self, feat0, feat1, feat2, feat3):
        P5 = self.conv_for_feat3(feat3)  # 20, 20, 1024 -> 20, 20, 512
        P5_upsample = self.upsample(P5)  # 20, 20, 512 -> 40, 40, 512
        P4 = torch.cat([P5_upsample, feat2], 1)  # 40, 40, 512 -> 40, 40, 1024
        P4 = self.conv3_for_upsample1(P4)  # csplayer # 40, 40, 1024 -> 40, 40, 512
        P4 = self.conv_for_feat2(P4)  # 40, 40, 512 -> 40, 40, 256

        P4_upsample = self.upsample(P4)  # 40, 40, 256 -> 80, 80, 256
        P3 = torch.cat([P4_upsample, feat1], 1)  # 80, 80, 256 cat 80, 80, 256 -> 80, 80, 512
        P3 = self.conv3_for_upsample2(P3)  # csplayer # 80, 80, 512 -> 80, 80, 256
        P3 = self.conv_for_feat1(P3)  # 80, 80, 256 -> 80, 80, 128


        P3_upsample = self.upsample(P3)  # 80, 80, 128 -> 160, 160, 128
        P2 = torch.cat([P3_upsample, feat0], 1) # 160, 160, 128 cat 160, 160, 128 -> 160, 160, 256
        P2 = self.conv3_for_upsample3(P2)  # csplayer #  160, 160, 256 -> 160, 160, 128  输出1

        P2_downsample = self.down_sample3(P3)  # 160, 160, 128 -> 80, 80, 128
        # 三个特征concat
        P3 = torch.cat([P2_downsample, P3, feat1], 1)  # -> 80, 80, 128+128+256
        P3 = self.conv_channel1(P3)  # -> 80, 80, 256

        P3_downsample = self.down_sample1(P3)  # 80, 80, 256 -> 40, 40, 256
        # 三个特征concat
        P4 = torch.cat([P3_downsample, P4, feat2], 1)  # -> 40, 40, 256 + 256 + 512
        P4 = self.conv_new1(P4)  # 1024 ->  40, 40, 512
        # P4 = torch.cat([P3_downsample, P4], 1)  # 40, 40, 256 cat 40, 40, 256 -> 40, 40, 512
        P4 = self.conv3_for_downsample1(P4)  # csplayer   # 40, 40, 512 -> 40, 40, 512  输出2

        P4_downsample = self.down_sample2(P4)  # 40, 40, 512 -> 20, 20, 512
        # 三个特征concat
        P5 = torch.cat([P4_downsample, P5, feat3], 1)  # -> 20, 20, 512 + 512 + 1024
        P5 = self.conv_new2(P5) # 2048 -> 20, 20, 1024
        # P5 = torch.cat([P4_downsample, P5], 1)   # 20, 20, 512 cat 20, 20, 512 -> 20, 20, 1024
        P5 = self.conv3_for_downsample2(P5)  # csplayer  # 20, 20, 1024 -> 20, 20, 1024  输出3
        return P2, P3, P4, P5

    def dense_bifpn(self, feat1, feat2, feat3):
        P5 = self.conv_for_feat3(feat3)  # 20, 20, 1024 -> 20, 20, 512
        P5_upsample = self.upsample(P5)  # 20, 20, 512 -> 40, 40, 512
        P4 = torch.cat([P5_upsample, feat2], 1)  # 40, 40, 512 -> 40, 40, 1024
        P4 = self.conv3_for_upsample1(P4)  # csplayer # 40, 40, 1024 -> 40, 40, 512
        P4 = self.conv_for_feat2(P4)  # 40, 40, 512 -> 40, 40, 256

        P4_upsample = self.upsample(P4)  # 40, 40, 256 -> 80, 80, 256
        P3 = torch.cat([P4_upsample, feat1], 1)  # 80, 80, 256 cat 80, 80, 256 -> 80, 80, 512
        P3 = self.conv3_for_upsample2(P3)  # csplayer # 80, 80, 512 -> 80, 80, 256  输出1

        P3_downsample = self.down_sample1(P3)  # 80, 80, 256 -> 40, 40, 256
        # 三个特征concat
        P4 = torch.cat([P3_downsample, P4, feat2], 1)  # -> 40, 40, 512+512
        P4 = self.conv_new1(P4)  # -> 40, 40, 512
        # P4 = torch.cat([P3_downsample, P4], 1)  # 40, 40, 256 cat 40, 40, 256 -> 40, 40, 512
        P4 = self.conv3_for_downsample1(P4)  # csplayer   # 40, 40, 512 -> 40, 40, 512  输出2

        P4_downsample = self.down_sample2(P4)  # 40, 40, 512 -> 20, 20, 512
        # 四个特征concat
        P3_downsample_new = self.down_sample1(P3_downsample) # 40, 40, 256 -> 20, 20, 256
        P5 = torch.cat([P3_downsample_new, P4_downsample, P5, feat3], 1)  # -> 256 + 512 + 512 + 1024
        P5 = self.conv_new21(P5)
        # P5 = torch.cat([P4_downsample, P5], 1)   # 20, 20, 512 cat 20, 20, 512 -> 20, 20, 1024
        P5 = self.conv3_for_downsample2(P5)  # csplayer  # 20, 20, 1024 -> 20, 20, 1024  输出3
        return P3, P4, P5

    def dense_bifpn_2(self, feat0, feat1, feat2, feat3):
        P5 = self.conv_for_feat3(feat3)  # 20, 20, 1024 -> 20, 20, 512
        P5_upsample = self.upsample(P5)  # 20, 20, 512 -> 40, 40, 512
        P4 = torch.cat([P5_upsample, feat2], 1)  # 40, 40, 512 -> 40, 40, 1024
        P4 = self.conv3_for_upsample1(P4)  # csplayer # 40, 40, 1024 -> 40, 40, 512
        P4 = self.conv_for_feat2(P4)  # 40, 40, 512 -> 40, 40, 256

        P4_upsample = self.upsample(P4)  # 40, 40, 256 -> 80, 80, 256
        P3 = torch.cat([P4_upsample, feat1], 1)  # 80, 80, 256 cat 80, 80, 256 -> 80, 80, 512
        P3 = self.conv3_for_upsample2(P3)  # csplayer # 80, 80, 512 -> 80, 80, 256
        P3 = self.conv_for_feat1(P3)  # 80, 80, 256 -> 80, 80, 128


        P3_upsample = self.upsample(P3)  # 80, 80, 128 -> 160, 160, 128
        P2 = torch.cat([P3_upsample, feat0], 1) # 160, 160, 128 cat 160, 160, 128 -> 160, 160, 256
        P2 = self.conv3_for_upsample3(P2)  # csplayer #  160, 160, 256 -> 160, 160, 128  输出1

        P2_downsample = self.down_sample3(P3)  # 160, 160, 128 -> 80, 80, 128
        # 三个特征concat
        P3 = torch.cat([P2_downsample, P3, feat1], 1)  # -> 80, 80, 128+128+256
        P3 = self.conv_channel1(P3)  # -> 80, 80, 256

        P2_downsample_1 = self.down_sample3(P2_downsample)  # 80, 80, 128 -> 40, 40, 128
        # 三个特征concat
        P4 = torch.cat([P2_downsample_1, P4, feat2], 1)  # -> 40, 40, 128 + 256 + 512
        P4 = self.conv_channel2(P4)  # 896 ->  40, 40, 512
        # P4 = torch.cat([P3_downsample, P4], 1)  # 40, 40, 256 cat 40, 40, 256 -> 40, 40, 512
        P4 = self.conv3_for_downsample1(P4)  # csplayer   # 40, 40, 512 -> 40, 40, 512  输出2

        P2_downsample_2 = self.down_sample3(P2_downsample)  # 40, 40, 128 -> 20, 20, 128
        # 三个特征concat
        P5 = torch.cat([P2_downsample_2, P5, feat3], 1)  # -> 20, 20, 128 + 512 + 1024
        P5 = self.conv_channel3(P5) # 1664 -> 20, 20, 1024
        # P5 = torch.cat([P4_downsample, P5], 1)   # 20, 20, 512 cat 20, 20, 512 -> 20, 20, 1024
        P5 = self.conv3_for_downsample2(P5)  # csplayer  # 20, 20, 1024 -> 20, 20, 1024  输出3
        return P2, P3, P4, P5